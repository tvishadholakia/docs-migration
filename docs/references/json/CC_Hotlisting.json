{
  "openapi": "3.0.3",
  "info": {
    "version": "0.1.9",
    "title": "CC_Hotlisting",
    "description": "This API is used to Block the credit card permanently and reissue a new card"
  },
  "servers": [
    {
      "url": "https://api-tryitout-uat.hdfcbank.com"
    }
  ],
  "tags": [
    {
      "name": "CC Hotlisting Sandbox",
      "description": "<b>High Criticality</b>"
    }
  ],
  "security": [
    {
      "oAuth2ClientCredentials": []
    },
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/API/Sandbox/CC_Hotlisting": {
      "post": {
        "tags": [
          "CC Hotlisting Sandbox"
        ],
        "summary": "CC Hotlisting Sandbox",
        "description": "<a href='https://developer.hdfcbank.com/sites/default/files/2022-04/HDFCBank_CC_Hotlisting_API_v1.1.docx'>User manual</a>",
        "requestBody": {
          "description": "Request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string",
              "example": "aHNDiZ5fj52HXscBQMBEJwdG3BBNjBNNaeCyKt5ff4DL6RmO"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API gateway response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/response"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "401 Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "405": {
            "description": "405 Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error405"
                }
              }
            }
          },
          "410": {
            "description": "410 Gone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error410"
                }
              }
            }
          },
          "411": {
            "description": "411 Length Required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error411"
                }
              }
            }
          },
          "412": {
            "description": "412 Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error412"
                }
              }
            }
          },
          "421": {
            "description": "421 Misdirected Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error421"
                }
              }
            }
          },
          "422": {
            "description": "422 Unprocessable Entity (WebDAV)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error422"
                }
              }
            }
          },
          "429": {
            "description": "429 Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error429"
                }
              }
            }
          },
          "500": {
            "description": "500 Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          },
          "503": {
            "description": "503 Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error503"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "request": {
        "type": "object",
        "properties": {
          "sessionContext": {
            "description": "Describes the details of the session",
            "required": [
              "bankCode",
              "transactionBranch",
              "channel",
              "externalReferenceNo",
              "userId"
            ],
            "properties": {
              "channel": {
                "type": "string",
                "description": "Channel code from which transaction isexecuted.Every system calling OBP-MW services will have unique channel code.",
                "example": "APIGW"
              },
              "userId": {
                "type": "string",
                "description": "System or Channel User ID.Every system/channel will a specific preconfigured user.",
                "example": "DevUser01"
              },
              "externalReferenceNo": {
                "type": "string",
                "description": "Unique reference number for eachtransaction, to be sent by the caller",
                "example": "60388789"
              },
              "bankCode": {
                "type": "string",
                "description": "Bank code or financial institutionidentification of the user performing aninteraction with the host",
                "example": "08"
              },
              "transactionBranch": {
                "type": "string",
                "description": "Branch from which the user is doing thetransaction. It may differ from the branch to which the user belongs",
                "example": "089999"
              }
            }
          },
          "CreditCardHotlistingOrchestrationRequestDTO": {
            "type": "object",
            "required": [
              "mobileNo",
              "cardNo",
              "dept",
              "memCategory",
              "memSubCat",
              "reIssueFlag",
              "reason"
            ],
            "properties": {
              "requestString": {
                "type": "object",
                "properties": {
                  "mobileNo": {
                    "type": "string",
                    "description": "Mobile No",
                    "example": "8828049259"
                  },
                  "cardNo": {
                    "type": "string",
                    "description": "Card No â€“ Last four",
                    "example": "6059"
                  },
                  "dept": {
                    "type": "string",
                    "description": "Department",
                    "example": "NET"
                  },
                  "memCategory": {
                    "type": "string",
                    "description": "Mem Category",
                    "example": "HOTLISTING"
                  },
                  "memSubCat": {
                    "type": "string",
                    "description": "Mem Sub Category",
                    "example": "EVA"
                  },
                  "reIssueFlag": {
                    "type": "string",
                    "description": "Re Issue flag",
                    "example": "Y"
                  },
                  "reason": {
                    "type": "string",
                    "description": "Reason",
                    "example": "REASON"
                  }
                }
              }
            }
          }
        }
      },
      "response": {
        "type": "object",
        "required": [
          "replyCode",
          "replyText"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "creditCardHotlistingOrchestrationResponseDTO"
          },
          "status": {
            "type": "object",
            "required": [
              "errorCode",
              "internalReferenceNumber",
              "externalReferenceNo"
            ],
            "properties": {
              "errorCode": {
                "type": "string",
                "description": "The error code in case of the transaction failure",
                "example": "0"
              },
              "extendedReply": {
                "type": "object",
                "description": "Extended reply may containextra information about the state of the transactionirrespective of success or failure"
              },
              "externalReferenceNo": {
                "type": "string",
                "description": "Same as input of ExternalReferenceNo inSession Context.",
                "example": "60388789"
              },
              "internalReferenceNumber": {
                "type": "string",
                "description": "OBP generated Reference Number",
                "example": "2021095466966932"
              },
              "isOverriden": {
                "type": "string",
                "example": "false"
              },
              "postingDate": {
                "type": "object",
                "properties": {
                  "dateString": {
                    "type": "string",
                    "example": "20210405000000"
                  }
                }
              },
              "replyCode": {
                "type": "integer",
                "description": "Reply code for thetransaction. This indicatesthe final state of thetransaction. It is further qualified by the extended reply of the transaction.",
                "example": 0
              },
              "replyText": {
                "type": "string",
                "description": "Indicates the error message corresponding to error code",
                "example": "0"
              }
            }
          },
          "responseString": {
            "type": "string",
            "example": "{\"errorIndicator\":\"\",\"cardSeqNo\":\"0000\",\"newCardNo\":\"\",\"newSeqNo\":\"0000\",\"processingFlag\":\"Y\",\"cardNo\":\"0001011080000156056\",\"respCode\":\"1\"}"
          }
        }
      },
      "Error400": {
        "type": "object",
        "required": [
          "ResponseSignatureEncryptedValue GWSymmetricKeyEncryptedValue Scope TransactionId Status"
        ],
        "properties": {
          "ResponseSignatureEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "GWSymmetricKeyEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "Scope": {
            "type": "string",
            "example": "ExampleOrg"
          },
          "TransactionId": {
            "type": "string",
            "example": "2019-05-04 T11:46:12.969+05:30"
          },
          "Status": {
            "type": "string",
            "example": "TH99400: Decryption Failed",
            "description": "TH99400: Decryption Failed"
          }
        }
      },
      "Error401": {
        "type": "object",
        "required": [
          "ResponseSignatureEncryptedValue GWSymmetricKeyEncryptedValue Scope TransactionId Status"
        ],
        "properties": {
          "ResponseSignatureEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "GWSymmetricKeyEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "Scope": {
            "type": "string",
            "example": "ExampleOrg"
          },
          "TransactionId": {
            "type": "string",
            "example": "2019-05-04 T11:46:12.969+05:30"
          },
          "Status": {
            "type": "string",
            "example": "TH99401: Invalid API Key",
            "description": "TH99401: Invalid API Key"
          }
        }
      },
      "Error405": {
        "type": "object",
        "required": [
          "ResponseSignatureEncryptedValue GWSymmetricKeyEncryptedValue Scope TransactionId Status"
        ],
        "properties": {
          "ResponseSignatureEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "GWSymmetricKeyEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "Scope": {
            "type": "string",
            "example": "ExampleOrg"
          },
          "TransactionId": {
            "type": "string",
            "example": "2019-05-04 T11:46:12.969+05:30"
          },
          "Status": {
            "type": "string",
            "example": "TH99405:Request Method Not Allowed For API Access",
            "description": "TH99405:Request Method Not Allowed For API Access"
          }
        }
      },
      "Error410": {
        "type": "object",
        "required": [
          "ResponseSignatureEncryptedValue GWSymmetricKeyEncryptedValue Scope TransactionId Status"
        ],
        "properties": {
          "ResponseSignatureEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "GWSymmetricKeyEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "Scope": {
            "type": "string",
            "example": "ExampleOrg"
          },
          "TransactionId": {
            "type": "string",
            "example": "2019-05-04 T11:46:12.969+05:30"
          },
          "Status": {
            "type": "string",
            "example": "TH99410:Cross Site Forgery Detected in API Request Message Payload",
            "description": "TH99410:Cross Site Forgery Detected in API Request Message Payload"
          }
        }
      },
      "Error411": {
        "type": "object",
        "required": [
          "ResponseSignatureEncryptedValue GWSymmetricKeyEncryptedValue Scope TransactionId Status"
        ],
        "properties": {
          "ResponseSignatureEncryptedValue": {
            "type": "integer",
            "example": ""
          },
          "GWSymmetricKeyEncryptedValue": {
            "type": "integer",
            "example": ""
          },
          "Scope": {
            "type": "string",
            "example": "ExampleOrg"
          },
          "TransactionId": {
            "type": "integer",
            "example": "2019-05-04 T11:46:12.969+05:30"
          },
          "Status": {
            "type": "string",
            "example": "TH99411:Invalid Content Type in API Request Message Payload",
            "description": "TH99411:Invalid Content Type in API Request Message Payload"
          }
        }
      },
      "Error412": {
        "type": "object",
        "required": [
          "ResponseSignatureEncryptedValue GWSymmetricKeyEncryptedValue Scope TransactionId Status"
        ],
        "properties": {
          "ResponseSignatureEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "GWSymmetricKeyEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "Scope": {
            "type": "string",
            "example": "ExampleOrg"
          },
          "TransactionId": {
            "type": "string",
            "example": "2019-05-04 T11:46:12.969+05:30"
          },
          "Status": {
            "type": "string",
            "example": "TH99412:Oauth Token Validation failed",
            "description": "TH99412:Oauth Token Validation failed"
          }
        }
      },
      "Error421": {
        "type": "object",
        "required": [
          "ResponseSignatureEncryptedValue GWSymmetricKeyEncryptedValue Scope TransactionId Status"
        ],
        "properties": {
          "ResponseSignatureEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "GWSymmetricKeyEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "Scope": {
            "type": "string",
            "example": "ExampleOrg"
          },
          "TransactionId": {
            "type": "string",
            "example": "2019-05-04 T11:46:12.969+05:30"
          },
          "Status": {
            "type": "string",
            "example": "TH99421:Document Structure Threat in API Request Message Payload",
            "description": "TH99421:Document Structure Threat in API Request Message Payload"
          }
        }
      },
      "Error422": {
        "type": "object",
        "required": [
          "ResponseSignatureEncryptedValue GWSymmetricKeyEncryptedValue Scope TransactionId Status"
        ],
        "properties": {
          "ResponseSignatureEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "GWSymmetricKeyEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "Scope": {
            "type": "string",
            "example": "ExampleOrg"
          },
          "TransactionId": {
            "type": "string",
            "example": "2019-05-04 T11:46:12.969+05:30"
          },
          "Status": {
            "type": "string",
            "example": "TH99422:SQL Injection Detected in API Request Message Payload",
            "description": "TH99422:SQL Injection Detected in API Request Message Payload"
          }
        }
      },
      "Error500": {
        "type": "object",
        "required": [
          "ResponseSignatureEncryptedValue GWSymmetricKeyEncryptedValue Scope TransactionId Status"
        ],
        "properties": {
          "ResponseSignatureEncryptedValue": {
            "type": "integer",
            "example": ""
          },
          "GWSymmetricKeyEncryptedValue": {
            "type": "integer",
            "example": ""
          },
          "Scope": {
            "type": "string",
            "example": "ExampleOrg"
          },
          "TransactionId": {
            "type": "integer",
            "example": "2019-05-04 T11:46:12.969+05:30"
          },
          "Status": {
            "type": "string",
            "example": "TH99500:Backend Service Provided Unexpected Response",
            "description": "TH99500:Backend Service Provided Unexpected Response"
          }
        }
      },
      "Error429": {
        "type": "object",
        "required": [
          "ResponseEncryptedValue GWSymmetricKeyEncryptedValue Scope TransactionId Status"
        ],
        "properties": {
          "ResponseEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "GWSymmetricKeyEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "Scope": {
            "type": "string",
            "example": "ExampleOrg"
          },
          "TransactionId": {
            "type": "string",
            "example": "2019-05-04 T11:46:12.969+05:30"
          },
          "Status": {
            "type": "string",
            "example": "TH99429:DDOS Attack Detected from Requestor",
            "description": "TH99429:DDOS Attack Detected from Requestor"
          }
        }
      },
      "Error503": {
        "type": "object",
        "required": [
          "ResponseSignatureEncryptedValue GWSymmetricKeyEncryptedValue Scope TransactionId Status"
        ],
        "properties": {
          "ResponseSignatureEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "GWSymmetricKeyEncryptedValue": {
            "type": "string",
            "example": ""
          },
          "Scope": {
            "type": "string",
            "example": "ExampleOrg"
          },
          "TransactionId": {
            "type": "string",
            "example": "2019-05-04 T11:46:12.969+05:30"
          },
          "Status": {
            "type": "string",
            "example": "TH99503:API Back-end Service Not Available or Timed-Out",
            "description": "TH99503:API Back-end Service Not Available or Timed-Out"
          }
        }
      }
    },
    "securitySchemes": {
      "oAuth2ClientCredentials": {
        "type": "oauth2",
        "description": "This API to generate the oauth token",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://api-uat.hdfcbank.com/auth/oauth/v2/token",
            "scopes": {}
          }
        }
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "apikey"
      }
    }
  }
}